/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (k == 1) return head;
        int size = 0;
        ListNode node = head, newHead = head, temphead = head, kthNext, prev, prevTail = null;
        while (node != null)
        {
            size++;
            node = node.next;
        }
        for (int i = 0; i < size / k; i++)
        {
            if (i != 0)
            {
                node = newHead;
                for (int j = 0; j < k * i; j++)
                {
                    node = node.next;
                }
                temphead = node;
            }
            node = temphead;
            if (node == null) continue;
            for (int j = 0; j < k - 1; j++)
            {
                node = node.next;
            }
            kthNext = node.next;
            prev = node;
            if (i == 0) newHead = node;
            else prevTail.next = node;
            for (int j = 0; j < k - 2; j++)
            {
                node = temphead;
                for (int l = k - 2 - j; l > 0; l--)
                {
                    node = node.next;
                }
                prev.next = node;
                prev = node;
            }
            temphead.next = kthNext;
            prev.next = temphead;
            prevTail = temphead;
        }
        return newHead;
    }
}
